<?php

/**
 * Message
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    levandos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Message extends BaseMessage
{


 /// Получение статуса письма
     public function getStatus()
    {
         if($this->is_read==1 and $this->is_reply==0)
         {
           return __('не отвечено');
         }
         elseif($this->is_read==0 and $this->is_reply==0)
         {
             return __('не открыто');
         }
         else
         {
             return __('отвечено');
         }
        
     }

    /// Устанавливем флаг отвеченного
    
     public function setFromId($value)
    {
        $this->_set('from_id', $value);
        $s = Doctrine::getTable('sfGuardUser')->find($value);
        if($s)
        $this->setFromUsername($s->getUsername());
        $partner = Doctrine::getTable('sfGuardUser')->find($s->getPartnerId());
        if($partner)$this->setFromPartnerId ($partner->getId());

    }

     public function setToId($value)
    {
        $this->_set('to_id', $value);
        $s = Doctrine::getTable('sfGuardUser')->find($value);
        if($s)
        $this->setToUsername($s->getUsername());
        $partner = Doctrine::getTable('sfGuardUser')->find($s->getPartnerId());
        if($partner)$this->setToPartnerId ($partner->getId());

    }


    public function save(Doctrine_Connection $conn = null)
    {
         $new = $this->isNew();
         parent::save();
         if($new)
         {

                $pf = $this->getToUser()->getProfile();
                if($pf and $this->type_message!='first' and $this->type_message!='smile')
                {
                    $pf->setIsNewMessage(true);
                    $pf->save();
                    $this->makeHotlist();
                }

            if(strlen($this->title)==0)
           // $this->setTitle($this->makeTitle());
            $this->setMostActive();
         }


		 if($this->getReplyId()>0)
		 {
		   $s = Doctrine::getTable('Message')->find($this->getReplyId());
		   $s->setIsReply(true);
		   $s->save();
		 }
         parent::save();
    }

    public  function getLinkTitle()
    {
        if($this->is_read)
        {
        /*
            $str = '<div id="mesload_'.$this->getId().'" style="color: red; display: none">'.__('Wite please').'</div><div id="mesdiv_'.$this->getId().'">'.jq_link_to_remote($this->title,
                array(
                    'update' => 'mesdiv_'.$this->getId(),
                    'url'    => 'message/ashow?id='.$this->getId(),
                    'loading'  => "$('#mesdiv_".$this->getId()."').hide();$('#mesload_".$this->getId()."').show()",
                    'complete' => "$('#mesdiv_".$this->getId()."').show();$('#mesload_".$this->getId()."').hide()",
                    ), array('class'=>'but')
            ).'<div>';
        */

            $str =  link_to(__('Read letter'),'message/show?id='.$this->id,array('class'=>'but'));
        }
        else
         {
             $str = '<b>'.link_to(__('Read letter'),'message/show?id='.$this->id,array('class'=>'but')).'</b>';
         }

        return $str;


    }


    protected function makeTitle()
    {
        $string = strip_tags($this->content);
        $ar = explode(' ', $string);
        $ret = $ar[0].' '.$ar[1].' '.$ar[2];
        return $ret;


    }

    protected function makeHotlist()
    {
       //////Контакт владельца
        $cnt = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
        ->count();
   
        if($cnt ==0 )
        {
            $h = new Hotlist();
            $h->setFromId($this->from_id);
            $h->setToId($this->to_id);
            //$h->setLastMessageId($this->id);
            $h->setIsOpened(true);
            $h->save();
        }
        ///перекидывем тригер при ответе
         else {
            $h = Doctrine::getTable('Hotlist')
             ->createQuery('a')
             ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
             ->fetchOne();
            $h->setIsNewMessage(false);
           // $h->setLastMessageId($this->id);
            $h->setIsOpened(true);
            $h->save();
        }


         //////Контакт получателя

        $cnt = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.to_id=? and a.from_id=?',array($this->from_id, $this->to_id))
        ->count();
        if($cnt ==0 )
        {
            $h = new Hotlist();
            $h->setFromId($this->to_id);
            $h->setToId($this->from_id);
            $h->setIsNewMessage(true);
            $h->setLastMessageId($this->id);
            $h->setIsOpened(false);
            $h->save();
        }
       ///перекидывем тригер при ответе
         else {
            $h = Doctrine::getTable('Hotlist')
             ->createQuery('a')
             ->where('a.from_id=? and a.to_id=?',array($this->to_id, $this->from_id))
             ->fetchOne();
            $h->setIsNewMessage(true);
            $h->setLastMessageId($this->id);
            $h->setIsOpened(false);
            $h->save();
        }

    }


        protected function setMostActive()
    {
       return true;
       $user = $this->getToUser();
       $q = Doctrine_Query::create()
       ->select('count(*) as cnt, from_id')
       ->from('Message m')
       ->where('m.to_id=?',array($user->getId()))
       ->groupBy('m.from_id')
       ->orderBy('cnt DESC');

       $r = $q->fetchOne();
       //echo $q->getSqlQuery();



       if($r)
       {
           $p = $user->getProfile();
           $p->setMostActiveUser($r['from_id']);
           $p->save();
       }

    }



    public function setImage($value) {

        $this->_set('image', $value);
        if(strlen($value)>0)
            $this->generateThumbnail ( $value );

    }


    public function generateThumbnail($value) {



        $uploadDir = sfConfig::get ( 'sf_upload_dir' );
        $img_small = new sfImage( $uploadDir . '/message/original/' . $value,null);

        $img_small->thumbnail(100,100,'top');
        $img_small->saveAs($uploadDir . '/message/thumbnail/' . $value);


    }



    


}