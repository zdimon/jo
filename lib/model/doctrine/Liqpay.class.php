<?php

/**
 * Liqpay
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    levandos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Liqpay extends BaseLiqpay
{
    
    
    private function setMem()
    {
        $t = Doctrine::getTable('BillingType')->find($this->getMembershipId());
        $user = sfGuardUserTable::getInstance()->find($this->getUserId());
        $profile = $user->getProfile();
        if($user->getDateExpire()>date('Y-m-d'))
        {
            $dt = new sfDate($user->getDateExpire());
        }
        else
        {
            $dt = new sfDate();
        }


        switch ($this->getAmmount()) {
            case 1:
                $date_expire = $dt->addDay(30);
                $summa = $t->getSumma();

                break;
            case 2:
                $date_expire = $dt->addDay(60);
                $summa = $t->getSumma()*2;
                break;
            case 3:
                $date_expire = $dt->addDay(90);
                $summa = $t->getSumma()*3;
                break;

        }
      $tp = 0;
      switch ($this->getMembershipId()) {
          case 1:
              /// gold
              $tp = 4;
              $profile->setMaxAbonent(1000);
              $profile->save();
              $mess = __('Your membership has been upgrated.');
              break;
          case 2:
              /// silver
              $tp = 3;
              $profile->setMaxAbonent(15);
              $profile->save();
              $mess = __('Your membership has been upgrated.');
              break;
          case 3:
              // bronze
              $tp = 2;
              $profile->setMaxAbonent(5);
              $profile->save();
              $mess = __('Your membership has been upgrated.');
              break;
          case 4:
              // platinum
              $profile->setMaxAbonent(1000);
              $tp = 5;
              $mess = __('Your membership has been upgrated.');
              break;          
          case 0:
              

              $mess = __('Your account has been refunded.');
              break;

      }



      if($tp!=0)
      {
      $pf = $user->getProfile();
      $pf->setPacketId($tp);
      $pf->save();
       

     // $user->setAccount($user->getAccount()+$t->getCredit());
      $user->setDateExpire($date_expire->dump());
      $user->save();


        $b = new Billing();
        $b->setTitle($t->getTitle());
        $b->setTypeId($t->getId());
        $b->setUserId($user->getId());
        $b->setSumma($summa);
        //$b->setBalance($user->getAccount());
        //$b->setCredit($t->getCredit());
        $b->save();

      }
      else
      {
                    
              $user->setAccount($user->getAccount()+$this->getAmmount());
              $user->save();
      }

    }

    

    public function setStatus($v) {
        
        if($v==1)
        {
            $user = sfGuardUserTable::getInstance()->find($this->getUserId());
            
             $this->setMem();
        }
       $this->_set('status', $v);
    }

        public function getParameterFromXML($name)
    {
         $map = simplexml_load_string($this->getOutXml());
         return $map->$name;
       
    }

        public function getAppointment()
    {
       
        
         if($this->getMembershipId()>0)
        {
            $m = BillingTypeTable::getInstance()->find($this->getMembershipId());
            $d = $this->getAmmount()*30;
            return __('Buying membership').' "'.$m.'"'.' '.$d.' '.__('days');
        }
    }
    
    
    
       public function save(Doctrine_Connection $conn = null)
	{

            
                    $is_new = false;
                    if($this->isNew()) $is_new = true;


                    if($is_new)
                    {
                        if($this->getMembershipId()>0)
                        {
                            $m = BillingTypeTable::getInstance()->find($this->getMembershipId());
                            $summa = $m->getSumma()*$this->getAmmount();
                            $this->setSumma($summa);
                        }
                       
                                        
                        parent::save();
                        $this->makeOutXml();
                    }
                     parent::save();
        }
        
        
                private function makeOutXml()
        {
                  $summa = $this->getSumma();
                 // $summa = '0.5';
                  $xml="<request>
                    <version>1.2</version>
                    <merchant_id>i4131262216</merchant_id>
                    <result_url>http://".$_SERVER['HTTP_HOST']."/en/liqpay/done</result_url>
                    <server_url>http://".$_SERVER['HTTP_HOST']."/en/liqpay/pay</server_url>
                    <order_id>111".$this->getId()."</order_id>
                    <amount>".$summa."</amount>
                    <currency>EUR</currency>
                    <description>".$this->getAppointment()."</description>
                    <language>EN</language>
                    <default_phone></default_phone>
                    <pay_way>card</pay_way>
                    <goods_id>".$this->getId()."</goods_id>
                    </request>";
                  $this->setOutXml($xml);
        }
        
        public function getOutXmlEncode() {
            
               return base64_encode($this->getOutXml());
            
        }
        
       public function getSign() {
            
                $merc_sign = 'A0LEwv3j9GY2TsHEZhnbDq2pdA44w94';
                return base64_encode(sha1($merc_sign.$this->getOutXml().$merc_sign,1));
              
      
            
        }
        
}
