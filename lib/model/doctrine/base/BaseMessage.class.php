<?php

/**
 * BaseMessage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $from_id
 * @property string $from_username
 * @property integer $to_id
 * @property string $to_username
 * @property integer $from_partner_id
 * @property integer $to_partner_id
 * @property string $title
 * @property string $content
 * @property string $translate
 * @property string $image
 * @property integer $reply_id
 * @property enum $type_message
 * @property boolean $pub
 * @property boolean $is_read
 * @property boolean $is_reply
 * @property boolean $del_from
 * @property boolean $del_to
 * @property boolean $popup
 * @property boolean $to_other
 * @property boolean $is_email_sent
 * @property integer $back_id
 * @property sfGuardUser $FromUser
 * @property sfGuardUser $ToUser
 * @property Doctrine_Collection $Hotlist
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getFromId()          Returns the current record's "from_id" value
 * @method string              getFromUsername()    Returns the current record's "from_username" value
 * @method integer             getToId()            Returns the current record's "to_id" value
 * @method string              getToUsername()      Returns the current record's "to_username" value
 * @method integer             getFromPartnerId()   Returns the current record's "from_partner_id" value
 * @method integer             getToPartnerId()     Returns the current record's "to_partner_id" value
 * @method string              getTitle()           Returns the current record's "title" value
 * @method string              getContent()         Returns the current record's "content" value
 * @method string              getTranslate()       Returns the current record's "translate" value
 * @method string              getImage()           Returns the current record's "image" value
 * @method integer             getReplyId()         Returns the current record's "reply_id" value
 * @method enum                getTypeMessage()     Returns the current record's "type_message" value
 * @method boolean             getPub()             Returns the current record's "pub" value
 * @method boolean             getIsRead()          Returns the current record's "is_read" value
 * @method boolean             getIsReply()         Returns the current record's "is_reply" value
 * @method boolean             getDelFrom()         Returns the current record's "del_from" value
 * @method boolean             getDelTo()           Returns the current record's "del_to" value
 * @method boolean             getPopup()           Returns the current record's "popup" value
 * @method boolean             getToOther()         Returns the current record's "to_other" value
 * @method boolean             getIsEmailSent()     Returns the current record's "is_email_sent" value
 * @method integer             getBackId()          Returns the current record's "back_id" value
 * @method sfGuardUser         getFromUser()        Returns the current record's "FromUser" value
 * @method sfGuardUser         getToUser()          Returns the current record's "ToUser" value
 * @method Doctrine_Collection getHotlist()         Returns the current record's "Hotlist" collection
 * @method Message             setId()              Sets the current record's "id" value
 * @method Message             setFromId()          Sets the current record's "from_id" value
 * @method Message             setFromUsername()    Sets the current record's "from_username" value
 * @method Message             setToId()            Sets the current record's "to_id" value
 * @method Message             setToUsername()      Sets the current record's "to_username" value
 * @method Message             setFromPartnerId()   Sets the current record's "from_partner_id" value
 * @method Message             setToPartnerId()     Sets the current record's "to_partner_id" value
 * @method Message             setTitle()           Sets the current record's "title" value
 * @method Message             setContent()         Sets the current record's "content" value
 * @method Message             setTranslate()       Sets the current record's "translate" value
 * @method Message             setImage()           Sets the current record's "image" value
 * @method Message             setReplyId()         Sets the current record's "reply_id" value
 * @method Message             setTypeMessage()     Sets the current record's "type_message" value
 * @method Message             setPub()             Sets the current record's "pub" value
 * @method Message             setIsRead()          Sets the current record's "is_read" value
 * @method Message             setIsReply()         Sets the current record's "is_reply" value
 * @method Message             setDelFrom()         Sets the current record's "del_from" value
 * @method Message             setDelTo()           Sets the current record's "del_to" value
 * @method Message             setPopup()           Sets the current record's "popup" value
 * @method Message             setToOther()         Sets the current record's "to_other" value
 * @method Message             setIsEmailSent()     Sets the current record's "is_email_sent" value
 * @method Message             setBackId()          Sets the current record's "back_id" value
 * @method Message             setFromUser()        Sets the current record's "FromUser" value
 * @method Message             setToUser()          Sets the current record's "ToUser" value
 * @method Message             setHotlist()         Sets the current record's "Hotlist" collection
 * 
 * @package    levandos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMessage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('jo_message');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('from_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('from_username', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('to_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('to_username', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('from_partner_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('to_partner_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('title', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('content', 'string', 500000, array(
             'type' => 'string',
             'length' => 500000,
             ));
        $this->hasColumn('translate', 'string', 2500, array(
             'type' => 'string',
             'length' => 2500,
             ));
        $this->hasColumn('image', 'string', 250, array(
             'type' => 'string',
             'length' => 250,
             ));
        $this->hasColumn('reply_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('type_message', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'smile',
              1 => 'message',
              2 => 'first',
             ),
             'default' => 'message',
             ));
        $this->hasColumn('pub', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_read', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_reply', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('del_from', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('del_to', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('popup', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('to_other', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_email_sent', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('back_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));


        $this->index('to_username', array(
             'fields' => 
             array(
              0 => 'to_username',
             ),
             ));
        $this->index('from_username', array(
             'fields' => 
             array(
              0 => 'from_username',
             ),
             ));
        $this->index('reply_id', array(
             'fields' => 
             array(
              0 => 'reply_id',
             ),
             ));
        $this->index('type_message', array(
             'fields' => 
             array(
              0 => 'type_message',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as FromUser', array(
             'local' => 'from_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as ToUser', array(
             'local' => 'to_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Hotlist', array(
             'local' => 'id',
             'foreign' => 'last_message_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}