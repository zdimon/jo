<?php

/**
 * Message
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    levandos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Message extends BaseMessage
{
    
  /// Массовая отправка
  public function sendMass()
  {
      $res = $this->getToUser();
      $users = ProfileTable::getAllUsers($res->getGender());
      foreach ($users as $to)
      {
          if($to->getUserId()<>$this->getToId())
          {
            $m = new Message();
            $m->setFromId($this->getFromId());
            $m->setToId($to->getUserId());
            $m->setTitle($this->getTitle());
            $m->setContent($this->getContent());
            $m->setImage($this->getImage());
            $m->save();
            
            //NotifyTable::sendTemplate($m->getToUser(),$this->getFromUser(),3);
            
          }
          
          
          
      }
  }

  /// Получение статуса письма
     public function getStatus()
    {
         if($this->is_read==1 and $this->is_reply==0)
         {
           return __('не отвечено');
         }
         elseif($this->is_read==0 and $this->is_reply==0)
         {
             return __('не открыто');
         }
         else
         {
             return __('отвечено');
         }
        
     }

    /// Устанавливем флаг отвеченного
    
     public function setFromId($value)
    {
        $this->_set('from_id', $value);
        $s = Doctrine::getTable('sfGuardUser')->find($value);
        if($s)
        $this->setFromUsername($s->getUsername());
        $partner = Doctrine::getTable('sfGuardUser')->find($s->getPartnerId());
        if($partner)$this->setFromPartnerId ($partner->getId());

    }

     public function setToId($value)
    {
        $this->_set('to_id', $value);
        $s = Doctrine::getTable('sfGuardUser')->find($value);
        if($s)
        $this->setToUsername($s->getUsername());
        $partner = Doctrine::getTable('sfGuardUser')->find($s->getPartnerId());
        if($partner)$this->setToPartnerId ($partner->getId());

    }


    public function save(Doctrine_Connection $conn = null)
    {
         $new = $this->isNew();
         parent::save();
         if($new)
         {

                $pf = $this->getToUser()->getProfile();
                if($pf and $this->type_message!='first' and $this->type_message!='smile')
                {
                    $pf->setIsNewMessage(true);
                    $pf->save();
                   
                    
                }

                
          //  if(strlen($this->title)==0)
           // $this->setTitle($this->makeTitle());
          //  $this->setMostActive();
                
                
                
         }


		 if($this->getReplyId()>0)
		 {
		   $s = Doctrine::getTable('Message')->find($this->getReplyId());
		   $s->setIsReply(true);
		   $s->save();
		 }
         parent::save();
    }
    
    /*
    public function getContent() {
        
        $r = $this->_get('content');
        if(strlen($this->getImage())>2)
        {
            $r .= '<a class="floatleft" href="http://'.$_SERVER['HTTP_HOST'].'/uploads/message/original/'.$this->getImage().'"><img src="http://'.$_SERVER['HTTP_HOST'].'/uploads/message/thumbnail/'.$this->getImage().'" align="left" style="padding: 5px"/></a>';
           
        }
        return $r;
    }
    
     */

    public  function getLinkTitle()
    {
        
       
        $link_to_read = '<div id="message_read_'.$this->getId().'">'.jq_link_to_remote(__('Read'), array(
                            'update' => 'message_read_'.$this->getId(),
                            'loading' => '$("#message_read_'.$this->getId().'").hide()',
                            'complete' => '$("#message_read_'.$this->getId().'").show()',
                            'script'=>true,
                            'method'=>'GET',
                            'url' => 'message/reada?i='.$this->getId()
               ),array('class'=>'but')).'</div>';
        
                $link_to_unread = '<div id="message_read_'.$this->getId().'">'.jq_link_to_remote(__('Unread'), array(
                            'update' => 'message_read_'.$this->getId(),
                            'loading' => '$("#message_read_'.$this->getId().'").hide()',
                            'complete' => '$("#message_read_'.$this->getId().'").show()',
                            'script'=>true,
                            'method'=>'GET',
                            'url' => 'message/reada?i='.$this->getId()
               ),array('class'=>'but')).'</div>';
                
        

        
        
        
        if($this->is_read or sfContext::getInstance()->getUser()->getGuardUser()->getId()==$this->getFromId())
        {
        /*
            $str = '<div id="mesload_'.$this->getId().'" style="color: red; display: none">'.__('Wite please').'</div><div id="mesdiv_'.$this->getId().'">'.jq_link_to_remote($this->title,
                array(
                    'update' => 'mesdiv_'.$this->getId(),
                    'url'    => 'message/ashow?id='.$this->getId(),
                    'loading'  => "$('#mesdiv_".$this->getId()."').hide();$('#mesload_".$this->getId()."').show()",
                    'complete' => "$('#mesdiv_".$this->getId()."').show();$('#mesload_".$this->getId()."').hide()",
                    ), array('class'=>'but')
            ).'<div>';
        */
            $str = $this->getContent();
            //$str =  link_to(__('Read letter'),'message/show?id='.$this->id,array('class'=>'but'));
        }
        elseif(sfContext::getInstance()->getUser()->getGuardUser()->getProfile()->getPacketId()==4 or sfContext::getInstance()->getUser()->getGuardUser()->getProfile()->getPacketId()==5)
         {
             //$str = '<b>'.link_to(__('Read letter'),'message/show?id='.$this->id,array('class'=>'but')).'</b>';
             //$str = 'none';
             $str = $this->getContent();
         }
         
         if(sfContext::getInstance()->getUser()->getGuardUser()->getGender()=='m' and sfContext::getInstance()->getUser()->getGuardUser()->getProfile()->getPacketId()==1 and  sfContext::getInstance()->getUser()->getGuardUser()->getDateExpire()<date('Y-m-d'))
         {
             $str =  link_to(__('Unread'),'message/show?id='.$this->id,array('class'=>'but'));
         } else {
             $str = $this->getContent();
             
         }
         
         //if($this->getFromId()!=sfContext::getInstance()->getUser()->getGuardUser()->getId())
        // {
         //    $this->setIsRead(true);
         //    $this->save();
        // }
         
         
         
         if($this->getIsRead())
        {
            $str = $link_to_read;
        } elseif($this->getFromId()==sfContext::getInstance()->getUser()->getGuardUser()->getId()) {
            //$str = $this->getContent();
            $str = $link_to_read;
        } else {
            $str = $link_to_unread;
        }
        
        if($this->getBackId()>0 and sfContext::getInstance()->getUser()->getGuardUser()->getIsSuperAdmin())
         {
             $fp = sfGuardUserTable::getInstance()->find($this->getBackId());
             if($fp)
             {
             $l = link_to('link','profile/show?username='.$fp->getUsername());
             $str .= '<p style="color: red">'.__('Message to false profile %1% %2% %3%',array('%1%'=>$fp->getUsername(),'%2%'=>$fp->getId(), '%3%'=>$l)).'</p>';
             }         
        }
        return $str;


    }


    protected function makeTitle()
    {
        $string = strip_tags($this->content);
        $ar = explode(' ', $string);
        $ret = $ar[0].' '.$ar[1].' '.$ar[2];
        return $ret;


    }
    
    public function setHotlistactive()
    {
         $o = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
        ->fetchOne();
         
         if($o)
         {
             $o->setIsActive(true);
             $o->save();
         }
         
         $o = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.to_id=? and a.from_id=?',array($this->from_id, $this->to_id))
        ->fetchOne();
         
         if($o)
         {
             $o->setIsActive(true);
             $o->save();
         }         
         
    }

    public function makeHotlist()
    {

        //////Лог для членства
        $cnt = Doctrine::getTable('Hotlistlog')
            ->createQuery('a')
            ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
            ->count();

        if($cnt ==0 )
        {
            $h = new Hotlistlog();
            $h->setFromId($this->from_id);
            $h->setToId($this->to_id);
            //$h->setLastMessageId($this->id);
            $h->setIsOpened(true);
            $h->save();
        }

       //////Контакт владельца
        $cnt = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
        ->count();
   
        if($cnt ==0 )
        {
            $h = new Hotlist();
            $h->setFromId($this->from_id);
            $h->setToId($this->to_id);
            //$h->setLastMessageId($this->id);
            $h->setIsOpened(true);
            $h->save();
        }
        ///перекидывем тригер при ответе
         else {
            $h = Doctrine::getTable('Hotlist')
             ->createQuery('a')
             ->where('a.from_id=? and a.to_id=?',array($this->from_id, $this->to_id))
             ->fetchOne();
            $h->setIsNewMessage(false);
           // $h->setLastMessageId($this->id);
            $h->setIsOpened(true);
            $h->save();
        }


         //////Контакт получателя

        $cnt = Doctrine::getTable('Hotlist')
        ->createQuery('a')
        ->where('a.to_id=? and a.from_id=?',array($this->from_id, $this->to_id))
        ->count();
        if($cnt ==0 )
        {
            $h = new Hotlist();
            $h->setFromId($this->to_id);
            $h->setToId($this->from_id);
            $h->setIsNewMessage(true);
            $h->setLastMessageId($this->id);
            $h->setIsOpened(false);
            $h->save();
        }
       ///перекидывем тригер при ответе
         else {
            $h = Doctrine::getTable('Hotlist')
             ->createQuery('a')
             ->where('a.from_id=? and a.to_id=?',array($this->to_id, $this->from_id))
             ->fetchOne();
            $h->setIsNewMessage(true);
            $h->setLastMessageId($this->id);
            $h->setIsOpened(false);
            $h->save();
        }

    }


        protected function setMostActive()
    {
       return true;
       $user = $this->getToUser();
       $q = Doctrine_Query::create()
       ->select('count(*) as cnt, from_id')
       ->from('Message m')
       ->where('m.to_id=?',array($user->getId()))
       ->groupBy('m.from_id')
       ->orderBy('cnt DESC');

       $r = $q->fetchOne();
       //echo $q->getSqlQuery();



       if($r)
       {
           $p = $user->getProfile();
           $p->setMostActiveUser($r['from_id']);
           $p->save();
       }

    }



    public function setImage($value) {

        $this->_set('image', $value);
        if(strlen($value)>0)
            $this->generateThumbnail ( $value );

    }


    public function generateThumbnail($value) {



        $uploadDir = sfConfig::get ( 'sf_upload_dir' );
        $img_small = new sfImage( $uploadDir . '/message/original/' . $value,null);

        $img_small->thumbnail(100,100,'top');
        $img_small->saveAs($uploadDir . '/message/thumbnail/' . $value);


    }



    


}